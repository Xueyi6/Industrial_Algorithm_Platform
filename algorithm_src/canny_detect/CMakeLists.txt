# S.1 工程创建
CMAKE_MINIMUM_REQUIRED(VERSION 3.22)
PROJECT(CANNYDETECT) 
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# S.2 定义输出路径
set(AP_ROOT ${CMAKE_CURRENT_SOURCE_DIR} CACHE PATH "Algorithm platform root") 
set(AP_DEBUG_BUILD_DIR "${AP_ROOT}/../bin" CACHE PATH "Build Output Dir") 

# 动态库（DLL）输出到 RUNTIME 目录
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${AP_DEBUG_BUILD_DIR}) 
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${AP_DEBUG_BUILD_DIR}) 
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${AP_DEBUG_BUILD_DIR}) 
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${AP_DEBUG_BUILD_DIR}) 

# 静态库（.lib/.a）输出到 ARCHIVE 目录
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${AP_DEBUG_BUILD_DIR}) 
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${AP_DEBUG_BUILD_DIR}) 
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${AP_DEBUG_BUILD_DIR}) 
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${AP_DEBUG_BUILD_DIR}) 

# S.3 寻找第三方库
FIND_PACKAGE(OpenCV REQUIRED)

# S.4 创建动态库（确保导出符号）
FILE(GLOB DLL_SRCS canny_detect.cpp canny_detect.h) 
add_library(CANNYDLL SHARED ${DLL_SRCS}) 
add_compile_definitions(AP_EXPORT)  # 确保头文件使用 ALGO_EXPORT 宏 
target_link_libraries(CANNYDLL ${OpenCV_LIBS})

# S.5 创建示例程序
FILE(GLOB EXAMPLE_SRCS ExampleMain.cpp)
add_executable(ExampleMain ${EXAMPLE_SRCS})
target_link_libraries(ExampleMain ${OpenCV_LIBS} CANNYDLL)